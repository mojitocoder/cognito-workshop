service: workshop

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${self:custom.stage}
  region: eu-west-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource:
        'Fn::GetAtt': [DDBTable, Arn]

custom:
  stage: ${opt:stage, 'dev'}
  team: 'team-a'
  userPoolName: wildrydes-${self:custom.team}-${self:custom.stage}
  userPoolClientName: wildrydes-client-${self:custom.team}-${self:custom.stage}

resources:
  Resources:
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:custom.userPoolName}
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False
            RequireUppercase: True
    UserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
    DDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: wildrydes-team-a
        AttributeDefinitions:
          - AttributeName: RideId
            AttributeType: S
        KeySchema:
          - AttributeName: RideId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      
  Outputs:
    UserPoolId: 
      Value: !Ref UserPool
    UserPoolClientId:
      Value: !Ref UserPoolClient

functions:
  requestUnicorn:
    handler: functions/request_unicorns.handler
    # role: SlsRydesLambdaRole
    events:
      - http:
          path: ride
          method: post
          cors: true
          authorizer:
            name: UnicornsAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
  postAuthentication:
    handler: functions/post_authentication.handler
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PostAuthentication
          existing: true
